### Temporal relations theory

# Resolution dependence: because of how the logic works, we need to define in what order conclusions about temporal relations can be resolved.
# This is particularly important for rules that define relationships between 3 or more events (e.g. because of transitivity).
# Without this measure, the logic may stop finding conclusions as several inference chains block each other without a clear winner,
# since the different inference chains can come from several theories without a clear ordering between them.
# Therefore, the order of resolution will be decided in one theory, this one.
temporalDependence_Asymmetry: temporalResolutionDepends(?a,?b) => -temporalResolutionDepends(?b,?a)
temporalDependence_Transitivity: temporalResolutionDepends(?a,?b), temporalResolutionDepends(?b,?c) => temporalResolutionDepends(?a,?c)

# Precedence theory
precedence_asymmetry: precedes(?a,?b) => -precedes(?b,?a)
precedence_transitivity: precedes(?a,?b), precedes(?b,?c), temporalResolutionDepends(?c,?a) => precedes(?a,?c)
precedence_contratransitivity: -precedes(?a,?b), -precedes(?b,?c), temporalResolutionDepends(?c,?a) => -precedes(?a,?c)

# Overlap theory
overlap_symmetry: overlap(?e,?f) => overlap(?f,?e)
overlap_contrasymmetry: -overlap(?e,?f) => -overlap(?f,?e)
overlap_notprecede: overlap(?e,?f) => -precedes(?e,?f)
precede_notoverlap: precedes(?e,?f) => -overlap(?e,?f)

# Unmarked discourse relation theory
#     consecutive texts are possibly related by some discourse relation
next: next(?b,?a) => discourseDirectConnection(?a,?b)
#     temporal resolution dependence in discourse parsing is by default the same as order of statement
temporal_resolution_discourse: next(?b,?a), hasEvent(?a,?e), hasEvent(?b,?f) => temporalResolutionDepends(?f,?e)
#     connecting to an elaboration connects also to the thing being elaborated
#         note: this should be sufficient to create the discourse pop behavior
elabcont: elaboration(?a,?b), discourseDirectConnection(?b,?c) => discourseDirectConnection(?a,?c)

# Narration theory
#     unless info to the contrary, discourse related clauses a and b are in a narration relation
n0: discourseDirectConnection(?a, ?b) => narration(?a, ?b)
#     Axiom of Narration: if two expressions in narration, the events they express form a sequence
n1: narration(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f) => precedes(?e,?f)
#     Contrapositive axiom of narration. Needed because the prop. defeasible logic of Nute will not automatically do contrapositive reasoning, but this seems required by the Asher-Lascarides examples.
n2: -precedes(?e,?f), hasEvent(?a,?e), hasEvent(?b,?f) => -narration(?a,?b)
n2 > n0
#     Constraint on Narration: cannot narrate from an elaboration without being an elaboration of the same thing
nc: elaboration(?a,?b), discourseDirectConnection(?b,?c), -elaboration(?a,?c) => -narration(?b,?c)
nc > n0

# Explanation theory
#     clauses that are linked by a discourse relation and which express causally connected events are connected via explanation
e0: discourseDirectConnection(?a, ?b), hasEvent(?a,?e), hasEvent(?b,?f), causes(?f,?e) => explanation(?a,?b)
#     Axiom of Explanation: if explanation, then associated events are in an appropriate precedence relation
e1: explanation(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f) => -precedes(?e,?f)
#     Contrapositive axiom of explanation
e2: precedes(?e,?f), hasEvent(?a,?e), hasEvent(?b,?f) => -explanation(?a,?b)

# Elaboration theory
#     default: two descriptions are not elaborations of each other
#         note: this is somewhat different from the paper. They use a defeasibly necessary test for elaboration: if an event does not prepare another, it is not an elaboration
#         however, this requires them to explicitly assert that winning a dance is not a preparation for a meal;
#         long-term, a reliance on explicit negations of preparation relations will not scale well, hence the use of a default here: unless explicitly known that an event prepares or is part of another etc. then no elaboration relation holds.
eld: discourseDirectConnection(?a, ?b) => -elaboration(?a,?b)
#     clauses that are linked by a discourse relation and which express events where one prepares the other are connected via elaboration
el0prep: discourseDirectConnection(?a, ?b), hasEvent(?a,?e), hasEvent(?b,?f), prepares(?f,?e) => elaboration(?a,?b)
el0prep > eld
#     clauses that are linked by a discourse relation and which express events where one is part of the other are connected via elaboration
el0part: discourseDirectConnection(?a, ?b), hasEvent(?a,?e), hasEvent(?b,?f), hasPart(?e,?f) => elaboration(?a,?b)
el0part > eld
#     Axiom of Elaboration: if elaboration, then associated events are in an appropriate precedence relation
el1: elaboration(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f) => -precedes(?e,?f)
#     Contrapositive axiom of elaboration
el2: precedes(?e,?f), hasEvent(?a,?e), hasEvent(?b,?f) => -elaboration(?a,?b)

# Background (discouse relation) theory
#     state overlap: clauses that are linked by a discourse relation where the second one is a state describe overlapping events
bg0: discourseDirectConnection(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f), state(?f) => overlap(?e,?f)
#     Note: we want to defeat the default assumption that events described in sequence also occur in sequence. Pushing this all the way to the overlap theory however seems to assert general overlap too much power (why wouldn't general precedes be stronger?). Otoh, if we have more evidence from the text we can defeat the default assumption
bg0p: discourseDirectConnection(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f), state(?f) => -precedes(?e,?f)
bg0p > n1
#     overlap between described events indicates a background relation
bg1: discourseDirectConnection(?a,?b), overlap(?e,?f), hasEvent(?a,?e), hasEvent(?b,?f) => background(?a,?b)
#     Axiom of Background: if clauses describing events are in a Background relation, described events overlap
bg2: background(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f) => overlap(?e,?f)
#     Contrapositive axiom of Background: if described events do not overlap, the clauses describing them are not in a Background relation
bg2: -overlap(?e,?f), hasEvent(?a,?e), hasEvent(?b,?f) => -background(?a,?b)

# Result (discourse relation) theory
#     result: if two related descriptions are about causally connected events, they are in a result relation
rs0: discourseDirectConnection(?a,?b), causes(?e,?f), hasEvent(?a,?e), hasEvent(?b,?f) => result(?a,?b)
rs0 > rs2
#     Axiom of Result: if two descriptions are in the result relation, then the events they describe are in a precedence relation
rs1: result(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f) => precedes(?e,?f)
rs1 > bg0p
rs1no: result(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f) => -overlap(?e,?f)
# TODO: refactor the theory so that it is not necessary to compare rs1no and overlap_symmetry. Currently, this comparison is needed to get that the result example is also a narration.
rs1no > overlap_symmetry
rs1no > bg0
rs1no > bg2
#     Contrapositive axiom of result: if two events are not in a precedence relation, then their descriptions are not in a result relation
rs2: -precedes(?e,?f), hasEvent(?a,?e), hasEvent(?b,?f) => -result(?a,?b)


# Causation theory (general)
# Option 1: this could be potentially automatically generated by adding some types to the theory, e.g. that causes is a more specific kind of precedes and therefore overrides some precedes rules
#c0: causes(?e,?f) => precedes(?e,?f)
#c0 > precedence_asymmetry
# Option 2: this is what is actually in the Asher-Lascarides paper, which is the softer principle that effects do not precede their causes. A bit trickier to automatically come out of the formalism
c0: causes(?e,?f) => -precedes(?f,?e)
c0 > n1

# Preparation theory (general)
# Option 1: this could be potentially automatically generated by adding some types to the theory, e.g. that prepares is a more specific kind of precedes and therefore overrides some precedes rules
#pr0: prepares(?e,?f) => precedes(?e,?f)
#pr0 > precedence_asymmetry
# Similar to causation. We take option 2 here but again the stronger option 1 would also be possible.
pr0: prepares(?e,?f) => -precedes(?f,?e)
pr0 > n1

# Forced motion theory (general)
fm0: motion(?e), forceApplication(?f), hasAgent(?e,?x), hasPatient(?f,?x), hasEvent(?a,?e), hasEvent(?b,?f), discourseDirectConnection(?a,?b) => causes(?f,?e)

# Pushing and falling as specific kinds of events
fall: hasAction(?e,fall) => motion(?e)
push: hasAction(?e,push) => forceApplication(?e)

# Switching off a lamp causes darkness
switchoff: hasAction(?e,switchOff), hasPatient(?e,?l), light(?l), hasAction(?f,propertyAscription), hasRange(?f,dark), hasDomain(?f,?s), structure(?s), locatedIn(?l,?s) => causes(?e,?f)
lamplocation: discourseDirectConnection(?a,?b), hasEvent(?a,?e), hasEvent(?b,?f), hasPatient(?e,?l), hasDomain(?f,?s), light(?l), structure(?s) => locatedIn(?l,?s)

# Property ascriptions are states
hasAction(?e,propertyAscription) => state(?e)

# SpatialLocating is a state
hasAction(?e,spatialLocating) => state(?e)

# Prerequisite resource production theory (general)
res0: hasResource(?e,?r), hasResult(?f,?r), hasEvent(?a,?e), hasEvent(?b,?f), discourseDirectConnection(?a,?b) => prepares(?f,?e)

# A bridge is a structure; so is a room
bridge: bridge(?x) => structure(?x)
room: room(?x) => structure(?x)

# Building a structure needs a plan as a resource. Drawing up a plan (for the structure) is a way to create it.
#     Note: silkie does not use "existential rules", and so from a sentence "Mark built the bridge" there is no way to insert a new entity, e.g. the plans.
#     However, if we know more of the context of the sentence, we have more ways to insert such an entity.
buildNeedsPlan: hasAction(?e,build), hasPatient(?e,?x), structure(?x), hasEvent(?a,?e), discourseDirectConnection(?a,?b), hasEvent(?b,?f), hasResult(?f,?p), plan(?p), designFor(?p,?x) => hasResource(?e,?p)
# Default assumption: if a structure and a plan are mentioned in discourse-connected clauses, the plan and structure are connected.
connectStructureAndPlan: hasPatient(?e,?x), structure(?x), hasResult(?f,?p), plan(?p), hasEvent(?a,?e), hasEvent(?b,?f), discourseDirectConnection(?a,?b) => designFor(?p, ?x)

# Theory of meals and lovely evenings
mealPartOfGoodTimeOfDay: hasAction(?f,have), hasAction(?e,have), hasPatient(?f,?m), meal(?m), hasPatient(?e,?l), timeOfDay(?l), enjoyable(?l), hasEvent(?a,?e), hasEvent(?b,?f), discourseDirectConnection(?a,?b) => prepares(?f,?e)
dishPartOfMeal: hasAction(?f,eat), hasAction(?e,have), hasPatient(?f,?d), dish(?d), hasPatient(?e,?m), meal(?m), hasEvent(?a,?e), hasEvent(?b,?f), discourseDirectConnection(?a,?b) => prepares(?f,?e)
winningPartOfGoodTimeOfDay: hasAction(?f,win), hasAction(?e,have), hasPatient(?f,?c), competition(?c), hasPatient(?e,?l), timeOfDay(?l), enjoyable(?l), hasEvent(?a,?e), hasEvent(?b,?f), discourseDirectConnection(?a,?b) => prepares(?f,?e)


# Theory of locations, overlaps, and homes vs. races
different_locations_do_not_overlap: hasLocation(?e,?l), -hasLocation(?f,?l) => -overlap(?e,?f)
nopubliceventsatprivatelocation: hasPatient(?e,?pe),publicEvent(?pe),hasLocation(?f,?h),privateLocation(?h) => -hasLocation(?e,?h)
raceispublic: race(?x) => publicEvent(?x)
homeisprivate: home(?x) => privateLocation(?x)

